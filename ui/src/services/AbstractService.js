"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractService = void 0;
const HttpService_ts_1 = require("./HttpService.ts");
const cdk_outputs_json_1 = require("../../cdk-outputs.json");
class AbstractService {
    constructor(url) {
        this.websocketUrl = cdk_outputs_json_1.RestApiStack.RestApiEndpoint0551178A;
        this.url = url;
    }
    async findAll() {
        try {
            const result = await HttpService_ts_1.HttpService.fetch(this.url, {
                method: "GET",
            });
            return await result.json();
        }
        catch (e) {
            console.error("Error: ", e);
            return [];
        }
    }
    async save(value) {
        try {
            const result = await HttpService_ts_1.HttpService.fetch(this.url, {
                method: "POST",
                body: JSON.stringify(value)
            });
            return await result.json();
        }
        catch (e) {
            console.error("Error: ", e);
            throw e;
        }
    }
    async update(id, value) {
        try {
            const result = await HttpService_ts_1.HttpService.fetch(`${this.url}?id=${id}`, {
                method: "PUT",
                body: JSON.stringify(value)
            });
            return await result.json();
        }
        catch (e) {
            console.error("Error: ", e);
            return undefined;
        }
    }
    async deleteById(id) {
        try {
            await HttpService_ts_1.HttpService.fetch(`${this.url}?id=${id}`, {
                method: "DELETE"
            });
        }
        catch (e) {
            console.error("Error: ", e);
        }
    }
}
exports.AbstractService = AbstractService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWJzdHJhY3RTZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiQWJzdHJhY3RTZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFEQUE2QztBQUM3Qyw2REFBb0Q7QUFFcEQsTUFBc0IsZUFBZTtJQUtqQyxZQUFzQixHQUFXO1FBRnZCLGlCQUFZLEdBQVcsK0JBQVksQ0FBQyx1QkFBdUIsQ0FBQTtRQUdqRSxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNuQixDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU87UUFDaEIsSUFBSTtZQUNBLE1BQU0sTUFBTSxHQUFHLE1BQU0sNEJBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtnQkFDN0MsTUFBTSxFQUFFLEtBQUs7YUFDaEIsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxNQUFNLE1BQU0sQ0FBQyxJQUFJLEVBQVMsQ0FBQztTQUNyQztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1IsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDNUIsT0FBTyxFQUFFLENBQUM7U0FDYjtJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQVE7UUFDdEIsSUFBSTtZQUNBLE1BQU0sTUFBTSxHQUFHLE1BQU0sNEJBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtnQkFDN0MsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO2FBQzlCLENBQUMsQ0FBQTtZQUNGLE9BQU8sTUFBTSxNQUFNLENBQUMsSUFBSSxFQUFPLENBQUM7U0FDbkM7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNSLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxDQUFDO1NBQ1g7SUFDTCxDQUFDO0lBQ00sS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFTLEVBQUUsS0FBUTtRQUNuQyxJQUFJO1lBQ0EsTUFBTSxNQUFNLEdBQUcsTUFBTSw0QkFBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLE9BQU8sRUFBRSxFQUFFLEVBQUU7Z0JBQzNELE1BQU0sRUFBRSxLQUFLO2dCQUNiLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQzthQUM5QixDQUFDLENBQUE7WUFDRixPQUFPLE1BQU0sTUFBTSxDQUFDLElBQUksRUFBTyxDQUFDO1NBQ25DO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM1QixPQUFPLFNBQVMsQ0FBQztTQUNwQjtJQUNMLENBQUM7SUFDTSxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQVU7UUFDOUIsSUFBSTtZQUNBLE1BQU0sNEJBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxPQUFPLEVBQUUsRUFBRSxFQUFFO2dCQUM1QyxNQUFNLEVBQUUsUUFBUTthQUNuQixDQUFDLENBQUE7U0FDTDtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1IsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDL0I7SUFDTCxDQUFDO0NBQ0o7QUF0REQsMENBc0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtIdHRwU2VydmljZX0gZnJvbSBcIi4vSHR0cFNlcnZpY2UudHNcIjtcclxuaW1wb3J0IHtSZXN0QXBpU3RhY2t9IGZyb20gXCIuLi8uLi9jZGstb3V0cHV0cy5qc29uXCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RTZXJ2aWNlPFQ+IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgdXJsOiBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgd2Vic29ja2V0VXJsOiBzdHJpbmcgPSBSZXN0QXBpU3RhY2suUmVzdEFwaUVuZHBvaW50MDU1MTE3OEFcclxuXHJcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IodXJsOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLnVybCA9IHVybDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgZmluZEFsbCgpIDogUHJvbWlzZTxUW10+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBIdHRwU2VydmljZS5mZXRjaCh0aGlzLnVybCwge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHJlc3VsdC5qc29uKCkgYXMgVFtdO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yOiBcIiwgZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIHNhdmUodmFsdWU6IFQpIDogUHJvbWlzZTxUPiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgSHR0cFNlcnZpY2UuZmV0Y2godGhpcy51cmwsIHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh2YWx1ZSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHJlc3VsdC5qc29uKCkgYXMgVDtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjogXCIsIGUpO1xyXG4gICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyBhc3luYyB1cGRhdGUoaWQ6c3RyaW5nLCB2YWx1ZTogVCkgOiBQcm9taXNlPFQgfCB1bmRlZmluZWQ+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBIdHRwU2VydmljZS5mZXRjaChgJHt0aGlzLnVybH0/aWQ9JHtpZH1gLCB7XHJcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXHJcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh2YWx1ZSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHJlc3VsdC5qc29uKCkgYXMgVDtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjogXCIsIGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyBhc3luYyBkZWxldGVCeUlkKGlkOiBzdHJpbmcpIDogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgYXdhaXQgSHR0cFNlcnZpY2UuZmV0Y2goYCR7dGhpcy51cmx9P2lkPSR7aWR9YCwge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3I6IFwiLCBlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=